This document briefly explains how to use galactic structure finder (gsf). 
For any issues or suggestions, you can drop me an email at obreja@usm.lmu.de. 
The present version is quite minimalistic, but if you would like to have a particular extra output just send an email. 
It has been tested with simulations in tipsy format (Gasoline & ChaNGa), but should also work with any simulation output that can be loaded with pynbody. 
Extensions to gsf will be added in the next months to output also various physical parameters of the distinct clusters.

**Prerequisites:

a) python 2.7 or a more recent version (this version has not been tested with python3!)
    - numpy, scipy, matplotlib 
    - scikit-learn (http://scikit-learn.org/stable/install.html)
    - pynbody (https://pynbody.github.io/pynbody/installation.html)
    
b) gfortran & f2py


**Precompiled library: 

To compile the Fortran module twobody.f95, so that it can be directly imported into python, 
execute in your source directory the bash script setup.sh:

./setup.sh 


**Before running gsf edit run.py for the correct gsf arguments. 

Mandatory arg:  - snaphot_file = name of the simulation input file

Optional args:  - out_dir = directory where all output should be redirected, default is the current dir
                - number_of_clusters = number of Gaussian mixtures, default is 2
                - covariance_type = type of parameters covariance, default is 'full'
                - whiten_data = flag deciding if the input data should be scaled, default is None
                - halo_id = id of the halo you want to analyze, default is 1 which means the most massive halo of snaphot_file
                - radius_align = radius of the material used to define the equatorial plane, default is 0.1 of rvir; accepts also distance in kpc
                - align_with = type of material used to define the equatorial plane, default is 'baryon'
                - n_init = number of initialization for the clustering algorithm, default is 1
                - plot = flag deciding whether gsf should also plot some figures with the results, default is True

The output of gsf is made of four pickle files and various .png figures if plot=True.
The four pickle files respect the following naming conventions:
    - ${snaphot_file}.halo_${halo_id}.star_potential.dat (contains the gravitational potential for all stars in the halo)
    - ${snaphot_file}.halo_${halo_id}.align_with_${align_with}.midplane_potential.dat (contains the halo center and rotation matrix that trasform 
        the simulation to the halo reference frame where the equatorial plane is the xy)
    - ${snaphot_file}.halo_${halo_id}.gmm_input_space.dat (contains the values of the normalized angular momenta and binding energies for all the stars in the halo)
    - ${snaphot_file}.halo_${halo_id}.inputspace_jzjc_jpjc_energy.scikit_gmm_full_${number_of_clusters}clusters.dat (contains the actual result)
        The hard tags of the stellar particles are saved as 'label', 'iord' providing the corresponding stellar identities. 
        The hard tags run from 0 to number_of_clusters-1.
At this time, the user has to decide for the names of the components if number_of_clusters > 2 (based on the output .png for example).
We will update the code in the near future with functions that can suggest the most likely name for a given component if number_of_clusters > 2,
and also with functions that compute various physical quantities for the clusters.

If you want to speed up the gravitational potential computation, you should set the system variable OMP_NUM_THREADS, e.g:

export OMP_NUM_THREADS=8 (bash)
setenv OMP_NUM_THREADS 8 (tcsh or csh)


**You are ready to run gsf:

from terminal:
python run.py

or from ipython:
In [1]: run run.py

